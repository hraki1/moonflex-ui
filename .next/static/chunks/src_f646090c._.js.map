{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ahmad%20Alhraki/Desktop/moonflex/src/components/UI/LoadingSpinner.tsx"],"sourcesContent":["// components/LoadingSpinner.tsx\r\nimport React from \"react\";\r\n\r\ninterface LoadingSpinnerProps {\r\n  text?: string;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  className?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\r\n  text = \"Loading\",\r\n  size = \"md\",\r\n  className = \"\",\r\n}) => {\r\n  const sizeMap = {\r\n    sm: {\r\n      container: \"h-8 w-8\",\r\n      border: \"border-3\",\r\n    },\r\n    md: {\r\n      container: \"h-12 w-12\",\r\n      border: \"border-4\",\r\n    },\r\n    lg: {\r\n      container: \"h-16 w-16\",\r\n      border: \"border-6\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`flex flex-col items-center justify-center gap-3 ${className}`}\r\n    >\r\n      {/* Main spinner */}\r\n      <div className=\"relative\">\r\n        {/* Outer ring with glow effect */}\r\n        <div\r\n          className={`${sizeMap[size].container} ${sizeMap[size].border} border-gray-800 rounded-full animate-spin`}\r\n          style={{\r\n            animationDuration: \"1.5s\",\r\n            borderTopColor: \"#e50914\",\r\n            boxShadow: \"0 0 0 0 rgba(229, 9, 20, 0.7)\",\r\n          }}\r\n        ></div>\r\n\r\n        {/* Inner glow effect */}\r\n        <div\r\n          className={`absolute inset-0 ${sizeMap[size].border} border-transparent rounded-full animate-spin`}\r\n          style={{\r\n            animationDuration: \"2s\",\r\n            borderTopColor: \"#e50914\",\r\n            filter: \"blur(2px)\",\r\n            opacity: 0.7,\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      {/* Loading text */}\r\n      <p className=\"text-red-500 font-sans font-medium text-sm uppercase tracking-wider animate-pulse\">\r\n        {text}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;AAShC,MAAM,iBAAgD,CAAC,EACrD,OAAO,SAAS,EAChB,OAAO,IAAI,EACX,YAAY,EAAE,EACf;IACC,MAAM,UAAU;QACd,IAAI;YACF,WAAW;YACX,QAAQ;QACV;QACA,IAAI;YACF,WAAW;YACX,QAAQ;QACV;QACA,IAAI;YACF,WAAW;YACX,QAAQ;QACV;IACF;IAEA,qBACE,6LAAC;QACC,WAAW,CAAC,gDAAgD,EAAE,WAAW;;0BAGzE,6LAAC;gBAAI,WAAU;;kCAEb,6LAAC;wBACC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,0CAA0C,CAAC;wBACzG,OAAO;4BACL,mBAAmB;4BACnB,gBAAgB;4BAChB,WAAW;wBACb;;;;;;kCAIF,6LAAC;wBACC,WAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,6CAA6C,CAAC;wBAClG,OAAO;4BACL,mBAAmB;4BACnB,gBAAgB;4BAChB,QAAQ;4BACR,SAAS;wBACX;;;;;;;;;;;;0BAKJ,6LAAC;gBAAE,WAAU;0BACV;;;;;;;;;;;;AAIT;KAtDM;uCAwDS","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ahmad%20Alhraki/Desktop/moonflex/src/app/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState, useMemo } from \"react\";\r\nimport { useAppSelector } from \"@/store/hooks\";\r\nimport Film from \"@/models/Film\";\r\nimport { RootState } from \"@/store/store\";\r\nimport LoadingSpinner from \"@/components/UI/LoadingSpinner\";\r\n\r\n// Constants for API configuration\r\nconst TMDB_API_KEY = \"fbd1edacbe4e94f662341a99cd3be594\";\r\nconst API_LANGUAGE = \"ar\";\r\nconst API_URL = \"https://api.themoviedb.org/3/movie/popular\";\r\n\r\n// Helper function to split array into chunks\r\nconst splitArray = (array: Film[], chunkSize: number): Film[][] => {\r\n  const result = [];\r\n  for (let i = 0; i < array.length; i += chunkSize) {\r\n    result.push(array.slice(i, i + chunkSize));\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default function HomeClient() {\r\n  const [movies, setMovies] = useState<Film[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const auth = useAppSelector((state: RootState) => state.auth);\r\n\r\n  console.log(auth);\r\n\r\n  // Fetch movies data\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const url = `${API_URL}?api_key=${TMDB_API_KEY}&language=${API_LANGUAGE}&page=1`;\r\n        const response = await fetch(url);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setMovies(data.results || []);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch movies:\", err);\r\n        setError(\"Failed to load movies. Please try again later.\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  // Memoize categorized movie lists\r\n  const movieLists = useMemo(() => {\r\n    if (!movies.length) return [];\r\n    return splitArray(movies, 5).slice(0, 4); // Get first 4 chunks of 5 movies each\r\n  }, [movies]);\r\n\r\n  const listTitles = [\"Popular on Netflix\", \"Action\", \"Romantic\", \"Hard\"];\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen text-red-500\">\r\n        {error}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <LandingPage />\r\n      {movieLists.map((films, index) => (\r\n        <div key={listTitles[index]} className={index > 0 ? \"mt-24\" : \"\"}>\r\n          <FilmList title={listTitles[index]} films={films} />\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAGA;;;AANA;;;;AAQA,kCAAkC;AAClC,MAAM,eAAe;AACrB,MAAM,eAAe;AACrB,MAAM,UAAU;AAEhB,6CAA6C;AAC7C,MAAM,aAAa,CAAC,OAAe;IACjC,MAAM,SAAS,EAAE;IACjB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,KAAK,UAAW;QAChD,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,GAAG,IAAI;IACjC;IACA,OAAO;AACT;AAEe,SAAS;;IACtB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,OAAO,CAAA,GAAA,wHAAA,CAAA,iBAAc,AAAD;2CAAE,CAAC,QAAqB,MAAM,IAAI;;IAE5D,QAAQ,GAAG,CAAC;IAEZ,oBAAoB;IACpB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,MAAM;oDAAc;oBAClB,aAAa;oBACb,SAAS;oBAET,IAAI;wBACF,MAAM,MAAM,GAAG,QAAQ,SAAS,EAAE,aAAa,UAAU,EAAE,aAAa,OAAO,CAAC;wBAChF,MAAM,WAAW,MAAM,MAAM;wBAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;4BAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;wBAC1D;wBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,UAAU,KAAK,OAAO,IAAI,EAAE;oBAC9B,EAAE,OAAO,KAAK;wBACZ,QAAQ,KAAK,CAAC,2BAA2B;wBACzC,SAAS;oBACX,SAAU;wBACR,aAAa;oBACf;gBACF;;YAEA;QACF;+BAAG,EAAE;IAEL,kCAAkC;IAClC,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;0CAAE;YACzB,IAAI,CAAC,OAAO,MAAM,EAAE,OAAO,EAAE;YAC7B,OAAO,WAAW,QAAQ,GAAG,KAAK,CAAC,GAAG,IAAI,sCAAsC;QAClF;yCAAG;QAAC;KAAO;IAEX,MAAM,aAAa;QAAC;QAAsB;QAAU;QAAY;KAAO;IAEvE,IAAI,WAAW;QACb,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC,6IAAA,CAAA,UAAc;;;;;;;;;;IAGrB;IAEA,IAAI,OAAO;QACT,qBACE,6LAAC;YAAI,WAAU;sBACZ;;;;;;IAGP;IAEA,qBACE;;0BACE,6LAAC;;;;;YACA,WAAW,GAAG,CAAC,CAAC,OAAO,sBACtB,6LAAC;oBAA4B,WAAW,QAAQ,IAAI,UAAU;8BAC5D,cAAA,6LAAC;wBAAS,OAAO,UAAU,CAAC,MAAM;wBAAE,OAAO;;;;;;mBADnC,UAAU,CAAC,MAAM;;;;;;;AAMnC;GArEwB;;QAIT,wHAAA,CAAA,iBAAc;;;KAJL","debugId":null}}]
}